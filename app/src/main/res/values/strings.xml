<resources>
 <string name="app_name">ScrollApp</string>

    <string name="textview">

</string>
 <string name="textview2"> Technology  , including computers and softwares, has played a crucial role in modern society.\n We use technology to send information, communicate, socialize, and many more. In this context, we find that professions\n involving coding and programming have become much in demand. Both terms are often used interchangeably, and many\n do not realize that there is a line between the two. Here, we will explain the difference between coding and programming.

 Coding
 Computers require a set of instructions in order to perform their functions. The source code is a set of instructions \nthat are used to make computers perform what they need to do. However, these codes are not written in our ordinary speaking language, as they are apt to process instructions on the most literal level. Computers use their own language, and it is\n not limited to only one. There are various languages for codes, and a coder’s job is to translate these languages and ensure that a program interprets and implements its instructions effectively. Thus, coding involves writing these codes or translating them based on instructions provided. Coding is done on a production level and is said to be the initial stage in programming.

<b>Programming</b>
 Programming involves providing instructions to a machine or application and ensure that it runs effectively without any issues. In short, it is giving instructions. Programmers create the code or the architecture behind a machine’s actions. Logic and analytical skills are required in order to make sure that instructions do not interfere with each other and make actions work as they should. Programming can involve coding, but it is believed to be a higher level to master as it can also involve system development, analysis, testing and debugging

 Coding	Programming
 Definition	The process of writing or translating code for a computer program	The process of assigning coded \ninstructions\n on a machine or application and ensuring its effectiveness and lack of error
 Purpose	The initial stage of programming, it makes sure that a machine can interpret the language and act as it is expected to do	To make sure that a machine or application performs its function without error
 Who does this?	Coder	Programmer
 What are they responsible for?	Using source code and instructions to code/translate them into a language to be inputted into the machine or application	Laying out the architecture, coding, and troubleshooting to make sure that a machine or application acts as it should
 Skills required	Knowing the ABC’s of the language, proper understanding of instructions provided	Logic, analytical sticks, coding know-how, attention to detail
 Can also refer to	In recent years, it is also used to refer to beginner programming/programmers	A professional in coding\n and programming, as opposed to the informal use of coder as a beginnerFor disciplines in which a qualitative format is preferential, including ethnography, humanistic geography or phenomenological psychology a varied approach to coding can be applied. Iain Hay (2005) outlines a two-step process beginning with basic coding in order to distinguish overall themes, followed by a more in depth, interpretive code in which more specific trends and patterns can be interpreted.[2]

Much of qualitative coding can be attributed to either grounded or a priori coding.[3] Grounded coding refers to allowing notable themes and patterns emerge from the document themselves, where as a priori coding requires the researcher to apply pre-existing theoretical frameworks to analyze the documents. As coding methods are applied across various texts, the researcher is able to apply axial coding, which is the process of selecting core thematic categories present in several documents to discover common patterns and relations.[4]

Coding is considered a process of discovery and is done in cycles. Prior to constructing categories, a researcher might\n apply a first and second cycle coding methods.[3] There are a multitude of methods available, and a researcher will want to pick one that is suited for the format and nature of their documents. Not all methods can be applied to every type of document. Some examples of first cycle coding methods include:See also: Computer program § History, Programmer § History, and History of programming languages
Programmable devices have existed for centuries. As early as the 9th century, a programmable music sequencer was invented \nby the Persian Banu Musa brothers, who described an automated mechanical flute player in the Book of Ingenious Devices.[4][5] In 1206, the Arab engineer Al-Jazari invented a programmable drum machine where a musical mechanical automaton could be made to play different rhythms and drum patterns, via pegs and cams.[6][7] In 1801, the Jacquard loom could produce entirely different weaves by changing the "program" – a series of pasteboard cards with holes punched in them.

Code-breaking algorithms have also existed for centuries. In the 9th century, the Arab mathematician Al-Kindi described a cryptographic algorithm for deciphering encrypted code, in A Manuscript on Deciphering Cryptographic Messages. He gave the first description of cryptanalysis by frequency analysis, the earliest code-breaking algorithm.[8]

The first computer program is generally dated to 1843, when mathematician Ada Lovelace published an algorithm to calculate a sequence of Bernoulli numbers, intended to be carried out by Charles Babbage\'s Analytical Engine.[9]


Data and instructions were once stored on external punched cards, which were kept in order and arranged in program decks.
In the 1880s Herman Hollerith invented the concept of storing data in machine-readable form.[10] Later a control \npanel (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, unit record equipment such as the IBM 602 and IBM 604, were programmed by control panels in a similar way, as were the first electronic computers. However, with the concept of the stored-program computer introduced in 1949, both programs and data were stored and manipulated in the same way in computer memory.[11]

Machine language
Machine code was the language of early programs, written in the instruction set of the particular machine, often in binary notation. Assembly languages were soon developed that let the programmer specify instruction in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses. However, because an assembly language is little more than a different notation for a machine language, two machines with different instruction sets also have different assembly languages.


Wired control panel for an IBM 402 Accounting Machine. Wires connect pulse streams from the card reader to counters and other internal logic and ultimately to the printer.
Compiler languages
See also: Compiler
High-level languages made the process of developing a program simpler and more understandable, and less bound to the \nunderlying hardware. The first compiler related tool, the A-0 System, was developed in 1952[12] by Grace Hopper, who also coined the term \'compiler\'.[13][14] FORTRAN, the first widely used high-level language to have a functional\n implementation, came out in 1957,[15] and many other languages were soon developed—in particular, COBOL aimed at commercial data processing, and Lisp for computer research.

These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of abstracting the code, making it easy to target for varying machine instruction sets via compilation declarations and heuristics. Compilers harnessed the power of computers to make programming easier[15] by allowing programmers to specify calculations by entering a formula using infix notation.

Source code entry
See also: Computer programming in the punched card era
Programs were mostly entered using punched cards or paper tape. By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers. Text editors were also developed that allowed changes and corrections to be made much more easily than with punched cards.

Modern programming
Quality requirements
Main article: Software quality
Whatever the approach to development may be, the final program must satisfy some fundamental properties. The following properties are among the most important:[16] [17]

Reliability: how often the results of a program are correct. This depends on conceptual correctness of algorithms and minimization of programming mistakes, such as mistakes in resource management (e.g., buffer overflows and race conditions) \nand logic errors (such as division by zero or off-by-one errors).
Robustness: how well a program anticipates problems due to errors (not bugs). This includes situations such as incorrect, inappropriate or corrupt data, unavailability of needed resources such as memory, operating system services, and network connections, user error, and unexpected power outages.
Usability: the ergonomics of a program: the ease with which a person can use the program for its intended purpose or in some cases even unanticipated purposes. Such issues can make or break its success even regardless of other issues. This involves a wide range of textual, graphical, and sometimes hardware elements that improve the clarity, intuitiveness, cohesiveness and completeness of a program\'s user interface.
Portability: the range of computer hardware and operating system platforms on which the source code of a program can be compiled/interpreted and run. This depends on differences in the programming facilities provided by the different platforms, including hardware and operating system resources, expected behavior of the hardware and operating system, and availability of platform-specific compilers (and sometimes libraries) for the language of the source code.
Maintainability: the ease with which a program can be modified by its present or future developers in order to make improvements or to customize, fix bugs and security holes, or adapt it to new environments. Good practices[18] during initial development make the difference in this regard. This quality may not be directly apparent to the end user but it can significantly affect the fate of a program over the long term.
Efficiency/performance: Measure of system resources a program consumes (processor time, memory space, slow devices such as disks, network bandwidth and to some extent even user interaction): the less, the better. This also includes careful management of resources, for example cleaning up temporary files and eliminating memory leaks. This is often discussed under the shadow of a chosen programming language. Although the language certainly affects performance, even slower languages, such as Python, can execute programs instantly from a human perspective. Speed, resource usage, and performance are important for programs that bottleneck the system, but efficient use of programmer time is also important and is related to cost: more hardware may be cheaper.
Readability of source code
In computer programming, readability refers to the ease with which a human reader can comprehend the purpose, control flow, and operation of source code. It affects the aspects of quality above, including portability, usability and most importantly maintainability.

Readability is important because programmers spend the majority of their time reading, trying to understand, reusing and modifying existing source code, rather than writing new source code. Unreadable code often leads to bugs, inefficiencies, and duplicated code. A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.[19]

Following a consistent programming style often helps readability. However, readability is more than just programming style. \nMany factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.[20] Some of these factors include:
</string>
</resources>